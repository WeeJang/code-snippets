all: foo

CC = g++

#------------------------------------------------------------
# 所有包含 cpp 文件的目录
#------------------------------------------------------------
LIB_DIR = lib
FOO_DIR = src/foo
BAR_DIR = src/bar

CFLAGS = -I $(LIB_DIR) -I $(BAR_DIR) -Wall

#------------------------------------------------------------
# 所有的 .o 文件都到这个根目录下
#------------------------------------------------------------
OBJ_DIR = .build

#------------------------------------------------------------
# $(CPPS) 展开为 lib/lib.cpp src/foo/foo.cpp src/bar/bar.cpp
#------------------------------------------------------------
CPPS = $(wildcard $(LIB_DIR)/*.cpp) $(wildcard $(FOO_DIR)/*.cpp) $(wildcard $(BAR_DIR)/*.cpp)

#------------------------------------------------------------
# $(OBJS) 展开为 .build/lib/lib.o .build/src/foo/foo.o .build/src/bar/bar.o
#------------------------------------------------------------
OBJS = $(CPPS:%.cpp=$(OBJ_DIR)/%.o)

# $(DEPS) 展开为 .build/lib/lib.d .build/src/foo/foo.d .build/src/bar/bar.d
DEPS = $(OBJS:.o=.d)

#------------------------------------------------------------
# 下面这个语句会把所有的 .d 文件 include 进来
#
# 前面的 - 号，是为了表示如果 $(DEPS) 不存在这里不会报错，主要用在第一次运行
# make 时，因为第一次运行时，那些 .d 文件都是不存在的
#------------------------------------------------------------
-include $(DEPS)

# ------------------------------------------------------------
# 这个 rule 的意思是对于所有你见到的 .o 文件都用如下规则生成
#
# 这里为什么需要 $(OBJ_DIR) 呢？原因是这样，'%' 相当于一个 wildcard，在字符串
# 匹配中会被替换成相应的子串，如果用 'xx%xx' 匹配 'xx111xx' 的话，'%' 就表示
# '111'，对于这里的 case，如果只写 %.o: %.cpp 的话，为了生成 .build/lib/lib.o，
# '%' 会被替换成 '.build/lib/lib' 而 '.build/lib/lib.cpp' 是不存在的，而如果写成
# '$(OBJ_DIR)/%.o'，则 '%' 会被替换成 'lib/lib'，这样就对了
# ------------------------------------------------------------
$(OBJ_DIR)/%.o: %.cpp
	@#------------------------------------------------------------
	@# mkdir 是必须的，make 不会自动创建你需要的文件夹
	@#------------------------------------------------------------
	@mkdir -p $(@D)
	@#------------------------------------------------------------
	@# 下面这个命令用于创建 .d 文件，比如 .build/src/foo/foo.d 会包含如下内容
	@#   .build/src/foo/foo.o: src/foo/foo.cpp lib/lib.h src/bar/bar.h
	@# -MM 表示要创建 .d 文件
	@# -MT $@ 表示 .d 文件中的目标会设为 $(OBJ_DIR)/%.o 展开后的结果，如
	@#     .build/src/foo/foo.o 否则会是去掉目录后的 .o 文件，如 foo.o
	@# -MF 表示输出到指定的 .d 文件中
	@#------------------------------------------------------------
	$(CC) $(CFLAGS) -MM -MT $@ -MF $(patsubst %.o,%.d,$@) $<
	$(CC) $(CFLAGS) -c -o $@ $<

foo: $(OBJS)
	$(CC) -o $@ $^

