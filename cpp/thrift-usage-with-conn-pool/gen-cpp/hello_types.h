/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hello_TYPES_H
#define hello_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _Request__isset {
  _Request__isset() : msg_size(false), garbage(false) {}
  bool msg_size;
  bool garbage;
} _Request__isset;

class Request {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Request() : msg_size(0), garbage(0) {
  }

  virtual ~Request() throw() {}

  int32_t msg_size;
  int32_t garbage;

  _Request__isset __isset;

  void __set_msg_size(const int32_t val) {
    msg_size = val;
  }

  void __set_garbage(const int32_t val) {
    garbage = val;
  }

  bool operator == (const Request & rhs) const
  {
    if (!(msg_size == rhs.msg_size))
      return false;
    if (!(garbage == rhs.garbage))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Request &a, Request &b);

typedef struct _Response__isset {
  _Response__isset() : msg(false), garbage(false) {}
  bool msg;
  bool garbage;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  Response() : msg(), garbage(0) {
  }

  virtual ~Response() throw() {}

  std::string msg;
  int32_t garbage;

  _Response__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  void __set_garbage(const int32_t val) {
    garbage = val;
  }

  bool operator == (const Response & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(garbage == rhs.garbage))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Response &a, Response &b);



#endif
